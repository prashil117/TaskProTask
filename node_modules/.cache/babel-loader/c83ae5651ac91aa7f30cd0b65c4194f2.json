{"ast":null,"code":"import * as types from '../constants/actionTypes';\nimport firebase from '../constants/appconfig';\nexport function AddData(params) {\n  var userarr = params.users;\n  var Apparr = params.accounts;\n  return dispatch => {\n    Object.keys(userarr).forEach(function (key) {\n      firebase.database().ref('users/' + key).set({\n        name: userarr[key].name,\n        account: userarr[key].account\n      }).then(function () {\n        console.log('Data added succesfully');\n      }).catch(function (error) {\n        console.log('Synchronization failed', error);\n      });\n    });\n    Object.keys(Apparr).forEach(function (key) {\n      firebase.database().ref('accounts/' + key).set({\n        apps: Apparr[key].apps\n      }).then(function () {\n        console.log('Data added succesfully');\n      }).catch(function (error) {\n        console.log('Synchronization failed', error);\n      });\n    });\n  };\n}\n_c = AddData;\nexport function fetchData(params) {\n  return dispatch => {\n    const db = firebase.database().ref('users');\n    const db1 = firebase.database().ref('accounts');\n    let newUserState = [];\n    let dataVal = {};\n    let userId = '';\n    db.on('value', function (snapshot) {\n      snapshot.forEach(data => {\n        dataVal = data.val();\n        userId = data.key;\n      });\n    }, function (errorObject) {\n      console.log(\"The read failed: \" + errorObject.code);\n    });\n    db1.child(dataVal.account).once('value', function (accountsnap) {\n      accountsnap.forEach(accountdata => {\n        accountdata.forEach(title => {\n          newUserState.push({\n            id: userId,\n            name: dataVal.name,\n            title: title.val().title\n          });\n        });\n      });\n    });\n    console.log(\"nwe\", newUserState);\n    dispatch({\n      type: types.RESPONSE_FETCH_USER,\n      data: newUserState\n    });\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AddData\");","map":{"version":3,"sources":["/Users/prashilparmar/Documents/REACT/beezerTest/testapp/src/Redux/actions/useraction.js"],"names":["types","firebase","AddData","params","userarr","users","Apparr","accounts","dispatch","Object","keys","forEach","key","database","ref","set","name","account","then","console","log","catch","error","apps","fetchData","db","db1","newUserState","dataVal","userId","on","snapshot","data","val","errorObject","code","child","once","accountsnap","accountdata","title","push","id","type","RESPONSE_FETCH_USER"],"mappings":"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","sourcesContent":["import * as types from '../constants/actionTypes'\nimport firebase from '../constants/appconfig';\n\nexport function AddData(params) {\n    var userarr = params.users;\n    var Apparr = params.accounts;\n    return (dispatch) => {\n        Object.keys(userarr).forEach(function (key) {\n            firebase.database().ref('users/' + key).set({\n                name: userarr[key].name,\n                account: userarr[key].account,\n            }).then(function () {\n                console.log('Data added succesfully');\n            }).catch(function (error) {\n                console.log('Synchronization failed', error);\n            });\n        });\n        Object.keys(Apparr).forEach(function (key) {\n            firebase.database().ref('accounts/' + key).set({\n                apps: Apparr[key].apps\n            }).then(function () {\n                console.log('Data added succesfully');\n            }).catch(function (error) {\n                console.log('Synchronization failed', error);\n            });\n        });\n    }\n}\nexport function fetchData(params) {\n    return (dispatch) => {\n        const db = firebase.database().ref('users');\n        const db1 = firebase.database().ref('accounts');\n        let newUserState = [];\n        let dataVal = {};\n        let userId = '';\n        db.on('value', function (snapshot) {\n            snapshot.forEach((data) => {\n                dataVal = data.val()\n                userId = data.key;\n            })\n        }, function (errorObject) {\n            console.log(\"The read failed: \" + errorObject.code);\n        });\n        db1.child(dataVal.account).once('value', function (accountsnap) {\n            accountsnap.forEach((accountdata) => {\n                accountdata.forEach((title) => {\n                    newUserState.push({\n                        id: userId,\n                        name: dataVal.name,\n                        title: title.val().title\n                    })\n\n                })\n            })\n        });\n        console.log(\"nwe\", newUserState)\n        dispatch({ type: types.RESPONSE_FETCH_USER, data: newUserState });\n\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}