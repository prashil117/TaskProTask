{"ast":null,"code":"import * as types from '../constants/actionTypes';\nimport firebase from '../constants/appconfig';\nexport function AddData(params) {\n  var userarr = params.users;\n  var Apparr = params.accounts;\n  return dispatch => {\n    Object.keys(userarr).forEach(function (key) {\n      firebase.database().ref('users/' + key).set({\n        name: userarr[key].name,\n        account: userarr[key].account\n      }).then(function () {\n        console.log('Data added succesfully');\n      }).catch(function (error) {\n        console.log('Synchronization failed', error);\n      });\n    });\n    Object.keys(Apparr).forEach(function (key) {\n      firebase.database().ref('accounts/' + key).set({\n        apps: Apparr[key].apps\n      }).then(function () {\n        console.log('Data added succesfully');\n      }).catch(function (error) {\n        console.log('Synchronization failed', error);\n      });\n    });\n  };\n}\n_c = AddData;\nexport function fetchData(params) {\n  return dispatch => {\n    const db = firebase.database().ref('users');\n    const db1 = firebase.database().ref('accounts');\n    db.on('value', function (snapshot) {\n      if (snapshot.val() !== null) {\n        var newUserState = [];\n        snapshot.forEach(data => {\n          const dataVal = data.val();\n          const userId = data.key;\n          db1.child(dataVal.account).once('value', function (accountsnap) {\n            Object.keys(accountsnap.val()).forEach(function (key) {\n              Object.keys(accountsnap.val()[key]).forEach(function (data) {\n                newUserState.push({\n                  id: userId,\n                  name: dataVal.name,\n                  title: accountsnap.val()[key][data].title\n                });\n                dispatch({\n                  type: types.RESPONSE_FETCH_USER,\n                  data: newUserState\n                });\n              });\n            });\n          });\n        });\n      } else {\n        dispatch({\n          type: types.RESPONSE_FETCH_USER,\n          data: []\n        });\n      }\n    });\n  };\n}\nexport function fetchAccounts(params) {\n  return async dispatch => {\n    const db1 = firebase.database().ref('accounts');\n    await db1.on('value', function (snapshot) {\n      if (snapshot.val() !== null) {\n        var newAccountState = [];\n        snapshot.forEach(data => {\n          const AppId = data.key;\n          data.forEach(async accountdata => {\n            Object.keys(accountdata.val()).forEach(function (key) {\n              newAccountState.push({\n                id: AppId,\n                name: key,\n                title: accountdata.val()[key].title\n              });\n              dispatch({\n                type: types.RESPONSE_FETCH_ACCOUNTS,\n                data: newAccountState\n              });\n            });\n          });\n        });\n      }\n    });\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AddData\");","map":{"version":3,"sources":["/Users/prashilparmar/Documents/REACT/beezerTest/testapp/src/Redux/actions/useraction.js"],"names":["types","firebase","AddData","params","userarr","users","Apparr","accounts","dispatch","Object","keys","forEach","key","database","ref","set","name","account","then","console","log","catch","error","apps","fetchData","db","db1","on","snapshot","val","newUserState","data","dataVal","userId","child","once","accountsnap","push","id","title","type","RESPONSE_FETCH_USER","fetchAccounts","newAccountState","AppId","accountdata","RESPONSE_FETCH_ACCOUNTS"],"mappings":"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","sourcesContent":["import * as types from '../constants/actionTypes'\nimport firebase from '../constants/appconfig';\n\nexport function AddData(params) {\n    var userarr = params.users;\n    var Apparr = params.accounts;\n    return (dispatch) => {\n        Object.keys(userarr).forEach(function (key) {\n            firebase.database().ref('users/' + key).set({\n                name: userarr[key].name,\n                account: userarr[key].account,\n            }).then(function () {\n                console.log('Data added succesfully');\n            }).catch(function (error) {\n                console.log('Synchronization failed', error);\n            });\n        });\n        Object.keys(Apparr).forEach(function (key) {\n            firebase.database().ref('accounts/' + key).set({\n                apps: Apparr[key].apps\n            }).then(function () {\n                console.log('Data added succesfully');\n            }).catch(function (error) {\n                console.log('Synchronization failed', error);\n            });\n        });\n    }\n}\nexport function fetchData(params) {\n    return (dispatch) => {\n        const db = firebase.database().ref('users');\n        const db1 = firebase.database().ref('accounts');\n        db.on('value', function (snapshot) {\n            if (snapshot.val() !== null) {\n                var newUserState = [];\n                snapshot.forEach((data) => {\n                    const dataVal = data.val()\n                    const userId = data.key;\n                    db1.child(dataVal.account).once('value', function (accountsnap) {\n                        Object.keys(accountsnap.val()).forEach(function (key) {\n                            Object.keys(accountsnap.val()[key]).forEach(function (data) {\n                                newUserState.push({\n                                    id: userId,\n                                    name: dataVal.name,\n                                    title: accountsnap.val()[key][data].title\n                                })\n                                dispatch({ type: types.RESPONSE_FETCH_USER, data: newUserState });\n                            })\n                        })\n                    });\n                })\n            }\n            else {\n                dispatch({ type: types.RESPONSE_FETCH_USER, data: [] });\n            }\n        })\n    }\n}\n\nexport function fetchAccounts(params) {\n    return async (dispatch) => {\n        const db1 = firebase.database().ref('accounts');\n        await db1.on('value', function (snapshot) {\n            if (snapshot.val() !== null) {\n                var newAccountState = [];\n                snapshot.forEach((data) => {\n                    const AppId = data.key;\n                    data.forEach(async (accountdata) => {\n                        Object.keys(accountdata.val()).forEach(function (key) {\n                            newAccountState.push({\n                                id: AppId,\n                                name: key,\n                                title: accountdata.val()[key].title\n                            })\n                            dispatch({ type: types.RESPONSE_FETCH_ACCOUNTS, data: newAccountState });\n                        })\n                    })\n                })\n            }\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}