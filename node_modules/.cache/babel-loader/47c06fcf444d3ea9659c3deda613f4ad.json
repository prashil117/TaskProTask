{"ast":null,"code":"import * as types from '../constants/actionTypes';\nimport firebase from '../constants/appconfig';\nexport function AddData(params) {\n  var userarr = params.users;\n  var Apparr = params.accounts;\n  console.log(\"params\", params);\n  return dispatch => {\n    Object.keys(userarr).forEach(function (key) {\n      firebase.database().ref('users/' + key).set({\n        name: userarr[key].name,\n        account: userarr[key].account\n      }).then(function () {\n        console.log('Data added succesfully');\n      }).catch(function (error) {\n        console.log('Synchronization failed', error);\n      });\n    });\n    Object.keys(Apparr).forEach(function (key) {\n      firebase.database().ref('accounts/' + key).set({\n        apps: Apparr[key].apps\n      }).then(function () {\n        console.log('Data added succesfully');\n      }).catch(function (error) {\n        console.log('Synchronization failed', error);\n      });\n    });\n  };\n}\n_c = AddData;\nexport function fetchData(params) {\n  return dispatch => {\n    const db = firebase.database().ref('users');\n    const db1 = firebase.database().ref('accounts');\n    let newUserState = [];\n    db.on('value', function (snapshot) {\n      snapshot.forEach(data => {\n        const dataVal = data.val();\n        db1.child(dataVal.account).once('value', function (accountsnap) {\n          accountsnap.forEach(accountdata => {\n            accountdata.forEach(title => {\n              newUserState.push({\n                id: data.key,\n                name: dataVal.name,\n                title: title.val().title\n              });\n            });\n          });\n        });\n      });\n      dispatch({\n        type: types.RESPONSE_FETCH_USER,\n        data: newUserState\n      });\n    }, function (errorObject) {\n      console.log(\"The read failed: \" + errorObject.code);\n    });\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AddData\");","map":{"version":3,"sources":["/Users/prashilparmar/Documents/REACT/beezerTest/testapp/src/Redux/actions/useraction.js"],"names":["types","firebase","AddData","params","userarr","users","Apparr","accounts","console","log","dispatch","Object","keys","forEach","key","database","ref","set","name","account","then","catch","error","apps","fetchData","db","db1","newUserState","on","snapshot","data","dataVal","val","child","once","accountsnap","accountdata","title","push","id","type","RESPONSE_FETCH_USER","errorObject","code"],"mappings":"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","sourcesContent":["import * as types from '../constants/actionTypes'\nimport firebase from '../constants/appconfig';\n\nexport function AddData(params) {\n    var userarr = params.users;\n    var Apparr = params.accounts;\n    console.log(\"params\", params)\n    return (dispatch) => {\n        Object.keys(userarr).forEach(function (key) {\n            firebase.database().ref('users/' + key).set({\n                name: userarr[key].name,\n                account: userarr[key].account,\n            }).then(function () {\n                console.log('Data added succesfully');\n            }).catch(function (error) {\n                console.log('Synchronization failed', error);\n            });\n        });\n        Object.keys(Apparr).forEach(function (key) {\n            firebase.database().ref('accounts/' + key).set({\n                apps: Apparr[key].apps\n            }).then(function () {\n                console.log('Data added succesfully');\n            }).catch(function (error) {\n                console.log('Synchronization failed', error);\n            });\n        });\n    }\n}\nexport function fetchData(params) {\n    return (dispatch) => {\n        const db = firebase.database().ref('users');\n        const db1 = firebase.database().ref('accounts');\n        let newUserState = [];\n        db.on('value', function (snapshot) {\n            snapshot.forEach(data => {\n                const dataVal = data.val()\n                db1.child(dataVal.account).once('value', function (accountsnap) {\n                    accountsnap.forEach(accountdata => {\n                        accountdata.forEach(title => {\n                            newUserState.push({\n                                id: data.key,\n                                name: dataVal.name,\n                                title: title.val().title\n                            })\n                        })\n                    })\n                });\n            })\n            dispatch({ type: types.RESPONSE_FETCH_USER, data: newUserState });\n        }, function (errorObject) {\n            console.log(\"The read failed: \" + errorObject.code);\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}