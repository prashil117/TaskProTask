{"ast":null,"code":"import * as types from '../constants/actionTypes';\nimport firebase from '../constants/appconfig';\nexport function AddData(params) {\n  var userarr = params.users;\n  var Apparr = params.accounts;\n  return dispatch => {\n    Object.keys(userarr).forEach(function (key) {\n      firebase.database().ref('users/' + key).set({\n        name: userarr[key].name,\n        account: userarr[key].account\n      }).then(function () {\n        console.log('Data added succesfully');\n      }).catch(function (error) {\n        console.log('Synchronization failed', error);\n      });\n    });\n    Object.keys(Apparr).forEach(function (key) {\n      firebase.database().ref('accounts/' + key).set({\n        apps: Apparr[key].apps\n      }).then(function () {\n        console.log('Data added succesfully');\n      }).catch(function (error) {\n        console.log('Synchronization failed', error);\n      });\n    });\n  };\n}\n_c = AddData;\nexport async function fetchData(params) {\n  return async dispatch => {\n    const db = firebase.database().ref('users');\n    const db1 = firebase.database().ref('accounts');\n    let newUserState = [];\n    db.on('value', function (snapshot) {\n      snapshot.forEach(async data => {\n        const dataVal = data.val();\n        const userId = data.key;\n        await db1.child(dataVal.account).once('value', function (accountsnap) {\n          accountsnap.forEach(accountdata => {\n            accountdata.forEach(title => {\n              newUserState.push({\n                id: userId,\n                name: dataVal.name,\n                title: title.val().title\n              });\n            });\n          });\n        });\n      });\n      dispatch({\n        type: types.RESPONSE_FETCH_USER,\n        data: newUserState\n      });\n    }, function (errorObject) {\n      console.log(\"The read failed: \" + errorObject.code);\n    });\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AddData\");","map":{"version":3,"sources":["/Users/prashilparmar/Documents/REACT/beezerTest/testapp/src/Redux/actions/useraction.js"],"names":["types","firebase","AddData","params","userarr","users","Apparr","accounts","dispatch","Object","keys","forEach","key","database","ref","set","name","account","then","console","log","catch","error","apps","fetchData","db","db1","newUserState","on","snapshot","data","dataVal","val","userId","child","once","accountsnap","accountdata","title","push","id","type","RESPONSE_FETCH_USER","errorObject","code"],"mappings":"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","sourcesContent":["import * as types from '../constants/actionTypes'\nimport firebase from '../constants/appconfig';\n\nexport function AddData(params) {\n    var userarr = params.users;\n    var Apparr = params.accounts;\n    return (dispatch) => {\n        Object.keys(userarr).forEach(function (key) {\n            firebase.database().ref('users/' + key).set({\n                name: userarr[key].name,\n                account: userarr[key].account,\n            }).then(function () {\n                console.log('Data added succesfully');\n            }).catch(function (error) {\n                console.log('Synchronization failed', error);\n            });\n        });\n        Object.keys(Apparr).forEach(function (key) {\n            firebase.database().ref('accounts/' + key).set({\n                apps: Apparr[key].apps\n            }).then(function () {\n                console.log('Data added succesfully');\n            }).catch(function (error) {\n                console.log('Synchronization failed', error);\n            });\n        });\n    }\n}\nexport async function fetchData(params) {\n    return async (dispatch) => {\n        const db = firebase.database().ref('users');\n        const db1 = firebase.database().ref('accounts');\n        let newUserState = [];\n        db.on('value', function (snapshot) {\n            snapshot.forEach(async (data) => {\n                const dataVal = data.val()\n                const userId = data.key;\n                await db1.child(dataVal.account).once('value', function (accountsnap) {\n                    accountsnap.forEach(accountdata => {\n                        accountdata.forEach(title => {\n                            newUserState.push({\n                                id: userId,\n                                name: dataVal.name,\n                                title: title.val().title\n                            })\n\n                        })\n                    })\n                });\n            })\n            dispatch({ type: types.RESPONSE_FETCH_USER, data: newUserState });\n        }, function (errorObject) {\n            console.log(\"The read failed: \" + errorObject.code);\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}