{"ast":null,"code":"import * as types from '../constants/actionTypes';\nimport firebase from '../constants/appconfig';\nexport function AddData(params) {\n  var userarr = params.users;\n  var Apparr = params.accounts;\n  return dispatch => {\n    Object.keys(userarr).forEach(function (key) {\n      firebase.database().ref('users/' + key).set({\n        name: userarr[key].name,\n        account: userarr[key].account\n      }).then(function () {\n        console.log('Data added succesfully');\n      }).catch(function (error) {\n        console.log('Synchronization failed', error);\n      });\n    });\n    Object.keys(Apparr).forEach(function (key) {\n      firebase.database().ref('accounts/' + key).set({\n        apps: Apparr[key].apps\n      }).then(function () {\n        console.log('Data added succesfully');\n      }).catch(function (error) {\n        console.log('Synchronization failed', error);\n      });\n    });\n  };\n}\n_c = AddData;\nexport function fetchData(params) {\n  return async dispatch => {\n    const db = firebase.database().ref('users');\n    const db1 = firebase.database().ref('accounts');\n    await db.on('value', function (snapshot) {\n      var newUserState = [];\n      snapshot.forEach(data => {\n        const dataVal = data.val();\n        const userId = data.key;\n        db1.child(dataVal.account).once('value', function (accountsnap) {\n          Object.keys(accountsnap.val()).forEach(function (key) {\n            Object.keys(accountsnap.val()[key]).forEach(function (data) {\n              console.log(\"key\", data);\n              console.log(\"key\", accountsnap.val()[key][data].title);\n              newUserState.push({\n                id: userId,\n                name: dataVal.name,\n                title: accountsnap.val()[key][data].title\n              });\n              dispatch({\n                type: types.RESPONSE_FETCH_USER,\n                data: newUserState\n              });\n            });\n          });\n        });\n      });\n    });\n  };\n}\nexport function fetchAccounts(params) {\n  return async dispatch => {\n    const db1 = firebase.database().ref('accounts');\n    await db1.on('value', function (snapshot) {\n      var newUserState = [];\n      snapshot.forEach(data => {\n        const AppId = data.key;\n        data.forEach(async accountdata => {\n          Object.keys(accountdata.val()).forEach(function (key) {\n            newUserState.push({\n              id: AppId,\n              name: key,\n              title: accountdata.val()[key].title\n            });\n          });\n          console.log(\"data\", newUserState); // dispatch({ type: types.RESPONSE_FETCH_USER, data: newUserState });\n        });\n      });\n    });\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AddData\");","map":{"version":3,"sources":["/Users/prashilparmar/Documents/REACT/beezerTest/testapp/src/Redux/actions/useraction.js"],"names":["types","firebase","AddData","params","userarr","users","Apparr","accounts","dispatch","Object","keys","forEach","key","database","ref","set","name","account","then","console","log","catch","error","apps","fetchData","db","db1","on","snapshot","newUserState","data","dataVal","val","userId","child","once","accountsnap","title","push","id","type","RESPONSE_FETCH_USER","fetchAccounts","AppId","accountdata"],"mappings":"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","sourcesContent":["import * as types from '../constants/actionTypes'\nimport firebase from '../constants/appconfig';\n\nexport function AddData(params) {\n    var userarr = params.users;\n    var Apparr = params.accounts;\n    return (dispatch) => {\n        Object.keys(userarr).forEach(function (key) {\n            firebase.database().ref('users/' + key).set({\n                name: userarr[key].name,\n                account: userarr[key].account,\n            }).then(function () {\n                console.log('Data added succesfully');\n            }).catch(function (error) {\n                console.log('Synchronization failed', error);\n            });\n        });\n        Object.keys(Apparr).forEach(function (key) {\n            firebase.database().ref('accounts/' + key).set({\n                apps: Apparr[key].apps\n            }).then(function () {\n                console.log('Data added succesfully');\n            }).catch(function (error) {\n                console.log('Synchronization failed', error);\n            });\n        });\n    }\n}\nexport function fetchData(params) {\n    return async (dispatch) => {\n        const db = firebase.database().ref('users');\n        const db1 = firebase.database().ref('accounts');\n        await db.on('value', function (snapshot) {\n            var newUserState = [];\n            snapshot.forEach((data) => {\n                const dataVal = data.val()\n                const userId = data.key;\n                db1.child(dataVal.account).once('value', function (accountsnap) {\n                    Object.keys(accountsnap.val()).forEach(function (key) {\n                        Object.keys(accountsnap.val()[key]).forEach(function (data) {\n                            console.log(\"key\", data)\n                            console.log(\"key\", accountsnap.val()[key][data].title)\n                            newUserState.push({\n                                id: userId,\n                                name: dataVal.name,\n                                title: accountsnap.val()[key][data].title\n                            })\n                            dispatch({ type: types.RESPONSE_FETCH_USER, data: newUserState });\n                        })\n                    })\n                });\n            })\n        })\n    }\n}\n\nexport function fetchAccounts(params) {\n    return async (dispatch) => {\n        const db1 = firebase.database().ref('accounts');\n        await db1.on('value', function (snapshot) {\n            var newUserState = [];\n            snapshot.forEach((data) => {\n                const AppId = data.key;\n                data.forEach(async (accountdata) => {\n                    Object.keys(accountdata.val()).forEach(function (key) {\n                        newUserState.push({\n                            id: AppId,\n                            name: key,\n                            title: accountdata.val()[key].title\n                        })\n                    })\n\n                    console.log(\"data\", newUserState)\n                    // dispatch({ type: types.RESPONSE_FETCH_USER, data: newUserState });\n                })\n            })\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}